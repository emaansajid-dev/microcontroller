// Pin Assignments
int red = 8;            // Car red light
int yellow = 10;        // Car yellow light
int green = 12;         // Car green light
int pedestrianGreen = 9; // Pedestrian green light
int pedestrianRed = 11;  // Pedestrian red light
int pushButton = 6;      // Push button for pedestrian request

// Enum for Traffic Light States
enum TrafficLightState {
  RED,                // Cars stop, pedestrians wait
  YELLOW_TO_GREEN,    // Transition to cars go
  GREEN,              // Cars go, pedestrians cross
  YELLOW_TO_RED       // Transition to cars stop
};

// State Variables
TrafficLightState currentState = RED; // Start with cars stopped
unsigned long previousMillis = 0;     // Tracks the time since the last state change
unsigned long stateDuration = 0;      // Duration of the current state
unsigned long buttonPressTime = 0;    // Tracks button press time
const unsigned long debounceDelay = 300; // Debounce delay for button

// Button State
bool pedestrianRequest = false; // Tracks if a pedestrian has requested to cross
bool lastButtonState = HIGH;    // Previous button state
bool currentButtonState = HIGH; // Current button state

void setup() {
  // Initialize Pins
  pinMode(red, OUTPUT);
  pinMode(yellow, OUTPUT);
  pinMode(green, OUTPUT);
  pinMode(pedestrianGreen, OUTPUT);
  pinMode(pedestrianRed, OUTPUT);
  pinMode(pushButton, INPUT_PULLUP); // Pull-up resistor for button

  // Start Serial Communication
  Serial.begin(9600);

  // Initial Lights: Cars green, pedestrians red
  digitalWrite(green, HIGH);
  digitalWrite(yellow, LOW);
  digitalWrite(red, LOW);
  digitalWrite(pedestrianGreen, LOW);
  digitalWrite(pedestrianRed, HIGH);
}

void loop() {
  unsigned long currentMillis = millis(); // Get the current time

  // Read Button and Handle Debounce
  currentButtonState = digitalRead(pushButton);
  if (currentButtonState == LOW && lastButtonState == HIGH && (currentMillis - buttonPressTime) > debounceDelay) {
    pedestrianRequest = true; // Register pedestrian request
    buttonPressTime = currentMillis; // Record the button press time
    Serial.println("Pedestrian button pressed!");
  }
  lastButtonState = currentButtonState; // Update button state

  // State Machine
  switch (currentState) {
    case RED:
      // Cars stop, pedestrians wait
      if (pedestrianRequest) {
        currentState = YELLOW_TO_GREEN;  // Transition to allow pedestrian crossing
        previousMillis = currentMillis;
        stateDuration = 2000; // Yellow light duration: 2 seconds
        Serial.println("Transitioning to YELLOW_TO_GREEN");
      }
      // Lights
      digitalWrite(red, HIGH);
      digitalWrite(yellow, LOW);
      digitalWrite(green, LOW);
      digitalWrite(pedestrianGreen, LOW);
      digitalWrite(pedestrianRed, HIGH);
      break;

    case YELLOW_TO_GREEN:
      // Transition to GREEN
      if (currentMillis - previousMillis >= stateDuration) {
        currentState = GREEN;
        previousMillis = currentMillis;
        stateDuration = 10000; // Cars green duration: 10 seconds
        Serial.println("Transitioning to GREEN");
      }
      // Lights
      digitalWrite(red, LOW);
      digitalWrite(yellow, HIGH);
      digitalWrite(green, LOW);
      digitalWrite(pedestrianGreen, LOW);
      digitalWrite(pedestrianRed, HIGH);
      break;

    case GREEN:
      // Cars go, pedestrians cross
      if (currentMillis - previousMillis >= stateDuration) {
        currentState = YELLOW_TO_RED; // Transition to stop cars
        previousMillis = currentMillis;
        stateDuration = 2000; // Yellow light duration: 2 seconds
        Serial.println("Transitioning to YELLOW_TO_RED");
      }
      // Lights
      digitalWrite(red, LOW);
      digitalWrite(yellow, LOW);
      digitalWrite(green, HIGH);
      digitalWrite(pedestrianGreen, HIGH); // Pedestrians cross
      digitalWrite(pedestrianRed, LOW);
      break;

    case YELLOW_TO_RED:
      // Transition to RED
      if (currentMillis - previousMillis >= stateDuration) {
        currentState = RED; // Return to RED state
        previousMillis = currentMillis;
        pedestrianRequest = false; // Reset pedestrian request
        Serial.println("Transitioning to RED");
      }
      // Lights
      digitalWrite(red, LOW);
      digitalWrite(yellow, HIGH);
      digitalWrite(green, LOW);
      digitalWrite(pedestrianGreen, LOW);
      digitalWrite(pedestrianRed, HIGH); // Pedestrians wait
      break;
  }
}
